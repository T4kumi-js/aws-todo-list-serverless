service: todo-list-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: sa-east-1
  deploymentBucket:
    name: todo-list-api-deploy-bucket
  environment:
    TASKS_TABLE_NAME: ${self:custom.tasksTableName}
    ALLOWED_STATIC_SITE: ${self:custom.staticAddress}

custom:
  esbuild:
    exclude:
      - '@aws-sdk/client-dynamodb'
      - '@aws-sdk/util-dynamodb'
  tasksTableName: Tasks
  staticBucketName: todo-list-static-web-bucket
  staticAddress: https://${self:custom.staticBucketName}.s3.${self:provider.region}.amazonaws.com

plugins:
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-offline

package:
  individually: true

functions:
  getAllTasks:
    handler: src/functions/getAllTasks/index.handler
    name: GetAllTasks
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:Scan'
        Resource: !GetAtt TasksTable.Arn
  createTask:
    handler: src/functions/createTask/index.handler
    name: CreateTask
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt TasksTable.Arn
  updateTask:
    handler: src/functions/updateTask/index.handler
    name: UpdateTask
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks/{taskId}
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:UpdateItem'
        Resource: !GetAtt TasksTable.Arn
  deleteTask:
    handler: src/functions/deleteTask/index.handler
    name: DeleteTask
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks/{taskId}
          method: DELETE
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:DeleteItem'
        Resource: !GetAtt TasksTable.Arn
  getTask:
    handler: src/functions/getTask/index.handler
    name: GetTask
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks/{taskId}
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
        Resource: !GetAtt TasksTable.Arn
  markTaskAsCompleted:
    handler: src/functions/markTaskAsCompleted/index.handler
    name: MarkTaskAsCompleted
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: tasks/complete/{taskId}
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:UpdateItem'
        Resource: !GetAtt TasksTable.Arn

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tasksTableName}
        AttributeDefinitions:
          - AttributeName: TaskId
            AttributeType: S
        KeySchema:
          - AttributeName: TaskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # StaticSiteBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.staticBucketName}
    # StaticSiteBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref StaticSiteBucket
    #     PolicyDocument:
    #       Statement:
    #         - Sid: PublicReadGetObject
    #           Effect: Allow
    #           Principal:
    #             CanonicalUser: !GetAtt StaticSiteOriginAccessIdentity.S3CanonicalUserId
    #           Action:
    #             - 's3:GetObject'
    #           Resource:
    #             Fn::Join: ['/', [!GetAtt StaticSiteBucket.Arn, '*']]
    # StaticSiteOriginAccessIdentity:
    #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #   Properties:
    #     CloudFrontOriginAccessIdentityConfig:
    #       Comment: Origin Access Identity to Access Website Bucket
    # StaticSiteCloudFront:
    #   Type: AWS::CloudFront:Distribution
    #   DependsOn:
    #     - StaticSiteBucket
    #   Properties:
    #     DistributionConfig:
    #       Origins:
    #         - DomainName: !GetAtt StaticSiteBucket.DomainName
    #           Id: S3Origin
    #           S3OriginConfig:
    #             OriginAccessIdentity:
    #               Fn::Join: ['/', ['origin-access-identity', 'cloudfront', !Ref StaticSiteOriginAccessIdentity]]
    #       CustomErrorResponses:
    #         - ErrorCachingMinTTL: 0
    #           ErrorCode: 403
    #           ResponseCode: 200
    #           ResponsePagePath: /index.html
    #       DefaultCacheBehavior:
    #         AllowedMethods:
    #           - GET
    #           - HEAD
    #         Compress: true
    #         ForwardedValues:
    #           QueryString: true
    #           Cookies:
    #             Forward: none
    #         TargetOriginId: S3Origin
    #         ViewerProtocolPolicy: redirect-to-https
    #       DefaultRootObject: index.html
    #       Enabled: true
    #       HttpVersion: http2
    #       PriceClass: PriceClass_All
    #       ViewerCertificate:
    #         CloudFrontDefaultCertificate: true
    #       Comment: Static Site CloudFront configuration
