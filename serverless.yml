service: todo-list-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: sa-east-1
  deploymentBucket:
    name: todo-list-api-deploy-bucket
  environment:
    ALLOWED_STATIC_SITE: ${self:custom.staticAddress}

custom:
  currentStage: ${opt:stage, self:provider.stage}
  tableNames:
    tasks: ${self:custom.currentStage}_Tasks
  dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
      noStart: true
  serverless-offline:
    httpPort: 4000
  esbuild:
    exclude:
      - '@aws-sdk/client-dynamodb'
      - '@aws-sdk/util-dynamodb'
    target: 'node14'
  staticAddress:
    Fn::Join: ['', ['https://', !GetAtt StaticFrontEndCloudFront.DomainName]]

plugins:
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

functions:
  - ${file(./src/infrastructure/lambda/tasks/create-task.yml)}
  - ${file(./src/infrastructure/lambda/tasks/update-task.yml)}
  - ${file(./src/infrastructure/lambda/tasks/delete-task.yml)}
  - ${file(./src/infrastructure/lambda/tasks/mark-task-as-completed.yml)}
  - ${file(./src/infrastructure/lambda/tasks/find-all-tasks.yml)}
  - ${file(./src/infrastructure/lambda/tasks/find-task-by-id.yml)}

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.tasks}
        AttributeDefinitions:
          - AttributeName: TaskId
            AttributeType: S
        KeySchema:
          - AttributeName: TaskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StaticFrontEndBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: todo-list-static-web-bucket
    StaticFrontEndOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Website Bucket
    StaticFrontEndBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticFrontEndBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt StaticFrontEndOriginAccessIdentity.S3CanonicalUserId
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join: ['/', [!GetAtt StaticFrontEndBucket.Arn, '*']]
    StaticFrontEndCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - StaticFrontEndBucket
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt StaticFrontEndBucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join: ['/', ['origin-access-identity', 'cloudfront', !Ref StaticFrontEndOriginAccessIdentity]]
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_All
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Comment: Static Front-end CloudFront configuration
